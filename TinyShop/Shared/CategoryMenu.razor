@inject ICategorySqlDataService categoryDataAccess
@inject IStringLocalizer<App> Localizer
<div class="@AccordionCssString">
    <div class="title">
        <i class="bars icon"></i>
        @Localizer["Categories"]
    </div>
    <div class="@openedMenuCssString">
        <div class="ui secondary vertical fluid menu">
            @if (categories is not null)
            {
                @foreach (CategoryModel category in categories)
                {
                    var url = $"categories/{category.Id.ToString()}";
                    @if (!category.IsParent)
                    {
                        url += "/products";
                    }
                    <NavLink class="item" href="@url" Match="NavLinkMatch.All">
                        @if (category.Image is not null)
                        {
                            var categoryImageUrl = category.Image.UriSizeS is not null ? category.Image.UriSizeS : category.Image.UriSizeM;
                            <img class="category-menu__image" src="@categoryImageUrl" width="30" height="30" alt="@category.Image.Caption">
                        }
                        else
                        {
                            <div class="category-menu__no-image-placeholder"></div>
                        }
                        @category.CategoryName
                    </NavLink>
                }
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool IsMenuOpened { get; set; } = false;

    private string openedMenuCssString;

    private string accordionCssString = "ui styled accordion";

    [Parameter]
    public string AccordionCssString
    {
        get => accordionCssString; set
        {
            if (!String.IsNullOrEmpty(value))
            {
                accordionCssString += $" {value}";
            }
        }
    }

    protected override void OnParametersSet()
    {
        openedMenuCssString = IsMenuOpened ? "active content" : "content";
    }

    private List<CategoryModel> categories;

    protected override async Task OnInitializedAsync()
    {
        categories = await categoryDataAccess.GetRoot();
    }
}

@page "/products/category/{categoryId:int}"
@inject IProductSqlDataService dataService
@inject IStringLocalizer<App> Localizer
@using TinyShop.Extensions
@using TinyShop.Helpers
@inject NavigationManager NavigationManager
@implements IDisposable
@inject IPurchaseSqlDataService purchaseDataService
@inject IUserUtilities userUtilities 

@if (products is not null)
{
    <div class="ui divided items">
        @foreach (ProductModel product in products)
        {
            var targetId = "carousel" + product.Id.ToString();
            <div class="ui item">
                <div class="image">
                    <img src="https://c.dns-shop.ru/thumb/st1/fit/320/250/f6b172885b875667704cd5e81ddf1ae2/ee726604f2aba57d1902e154e3b11d59d300834ba9f3d0aa113c21dc161e112c.jpg" class="d-block w-100" alt="...">
                </div>

                <div class="content">
                    <a class="header">@product.ProductName</a>
                    <div class="meta">
                        <span class="cinema">Union Square 14</span>
                    </div>
                    <div class="description">
                        <p>@product.Description</p>
                    </div>
                    <div class="extra">
                        <div class="ui right floated primary button" @onclick="async () => { await AddToCartHandler(product.Id); }">
                            @Localizer["Add to cart"]
                            <i class="right chevron icon"></i>
                        </div>
                    </div>
                </div>
            </div>
        }
        <Paginator NumberOfPages="@numberOfPages" CurrentPage="@currentPage" OnPageChanged="PageHasChanged" />
    </div>
}

@code {
    [Parameter]
    public int CategoryId { get; set; }

    private List<ProductModel> products;
    private ProductFilterModel filterModel;
    private int numberOfPages;
    private int currentPage;


    protected override async Task OnParametersSetAsync()
    {
        ResetAllVariables();
        GetQueryStringValues();
        filterModel = new ProductFilterModel
        {
            CategoryId = CategoryId,
            RowsPerPage = 3,
            PageNumber = currentPage > 0 ? currentPage : 1
        };
        products = await dataService.GetFilteredWithMetadata(filterModel);

        if (products.Any())
        {
            numberOfPages = (int)(Math.Ceiling((double)products[0].FoundRecords / filterModel.RowsPerPage));
        }

    }

    private async Task AddToCartHandler(int productId)
    {
        string userId = await userUtilities.GetLoggedInUserId();
        if (userId is not null)
        {
            await purchaseDataService.AddToCart(userId, productId, 1);
        }
    }

    private void ResetAllVariables()
    {
        currentPage = 0;
        numberOfPages = 0;

        filterModel = null;
        products = null;
    }


    void GetQueryStringValues()
    {
        NavigationManager.TryGetQueryString<int>("page", out currentPage);
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        base.InvokeAsync(async () =>
        {
            //await Task.Delay(1);
            GetQueryStringValues();
            filterModel.PageNumber = currentPage;
            products = await dataService.GetFilteredWithMetadata(filterModel);
            StateHasChanged();
        });

    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private void PageHasChanged(int page)
    {
        NavigationManager.NavigateTo($"/products/category/{CategoryId}?page={page}");
    }

}

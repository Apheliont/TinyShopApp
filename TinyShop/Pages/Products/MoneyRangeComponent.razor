@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="ui ticked range slider" id="slider-range"></div>
<div class="ui two column grid">
    <div class="row">
        <div class="column">
            <div class="ui fluid right small labeled input">
                <label for="price__lower-bound" class="ui label">₽</label>
                <input type="number"
                       id="price__lower-bound"
                       class="spinners--disable"
                       min="@LowerBound"
                       max="@UpperBound"
                       value="@_lowerValue"
                       @onchange="LowerBoundHandler">
            </div>
        </div>
        <div class="column">
            <div class="ui fluid right small labeled input">
                <label for="price__upper-bound" class="ui label">₽</label>
                <input type="number"
                       id="price__upper-bound"
                       class="spinners--disable"
                       min="@LowerBound"
                       max="@UpperBound"
                       value="@_upperValue"
                       @onchange="UpperBoundHandler">
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int LowerBound { get; set; }

    [Parameter]
    public int UpperBound { get; set; }

    [Parameter]
    public EventCallback<(int lowerValue, int upperValue)> OnRangeChange { get; set; }

    private int _lowerValue;
    private int _upperValue;



    private IJSObjectReference module;
    // Создаем объект который будет хранить ссылку на экземпляр этой страницы
    // Далее этот объект будет передан на JS строну
    private DotNetObjectReference<MoneyRangeComponent> thisObjReg;

    [JSInvokable]
    public async Task SliderChanged(int val, int min, int max)
    {
        await OnRangeChange.InvokeAsync((min, max));
        _lowerValue = min;
        _upperValue = max;
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        _lowerValue = LowerBound;
        _upperValue = UpperBound;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/scripts.js");
            // Инициализируем объект контейнер и передаем ему ссылку на экземляр объекта этой страницы
            // Далее ловим его на стороне JS
            thisObjReg = DotNetObjectReference.Create(this);
            await module.InvokeVoidAsync("initializeSlider", thisObjReg, LowerBound, UpperBound, _lowerValue, _upperValue, 1);
        }
    }

    private async Task LowerBoundHandler(ChangeEventArgs args)
    {
        if (module is not null)
        {
            if (Int32.TryParse(args.Value.ToString(), out _lowerValue))
            {
                await OnRangeChange.InvokeAsync((_lowerValue, _upperValue));
                await module.InvokeVoidAsync("setSliderState", _lowerValue, _upperValue);
            }
        }
    }

    private async Task UpperBoundHandler(ChangeEventArgs args)
    {
        if (module is not null)
        {
            if (Int32.TryParse(args.Value.ToString(), out _upperValue))
            {
                await OnRangeChange.InvokeAsync((_lowerValue, _upperValue));
                await module.InvokeVoidAsync("setSliderState", _lowerValue, _upperValue);
            }
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}

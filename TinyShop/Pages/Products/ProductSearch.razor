@page "/search/{searchSentence}"
@using System.Web;
@using System.Threading
@using MassTransit
@inject IStringLocalizer<App> Localizer
@inject IProductDataService productDataService
@implements IDisposable


<div class="ui grid">
    <div class="sixteen wide column">
        @if (exception is not null)
        {
            <h2 class="text-red">@Localizer["Sorry, search service isn't operate right now. Try again later"]</h2>
        }
        else if (products is not null && products.Any())
        {
            <ProductListComponent Products="@products" />
        }
        else if (products is not null && !products.Any())
        {
            <h2>@Localizer["Sorry, but nothing was found"]</h2>
        }
        else
        {
            <h2>@Localizer["Please wait, search in progress"]...</h2>
        }

    </div>
</div>

@code {
    [Parameter]
    public string SearchSentence { get; set; }

    private List<ProductModel> products;
    private CancellationTokenSource source = new CancellationTokenSource();
    private TimeoutException exception;

    protected override async Task OnParametersSetAsync()
    {
        string decodedUrlString = HttpUtility.UrlDecode(SearchSentence);
        try
        {
            products = await productDataService.SearchProducts(
            new ProductSearchRequestModel
            {
                SearchSentence = decodedUrlString,
                NumberOfRecords = 10
            }, source.Token);
        }
        catch (RequestTimeoutException)
        {
            exception = new TimeoutException();
        }

    }

    void IDisposable.Dispose()
    {
        source.Cancel();
    }
}

@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="ui ticked range slider" id="@ComponentUniqueName"></div>
<div class="ui two column grid">
    <div class="row">
        <div class="column">
            <div class="ui fluid right small labeled input">
                <label for="range-component__lower-bound" class="ui label">@RangeItem.Measurement</label>
                <input type="number"
                       id="range-component__lower-bound"
                       class="spinners--disable"
                       min="@RangeItem.LowerBound"
                       max="@RangeItem.UpperBound"
                       value="@RangeItem.From"
                       @onchange="FromHandler">
            </div>
        </div>
        <div class="column">
            <div class="ui fluid right small labeled input">
                <label for="range-component__upper-bound" class="ui label">@RangeItem.Measurement</label>
                <input type="number"
                       id="range-component__upper-bound"
                       class="spinners--disable"
                       min="@RangeItem.LowerBound"
                       max="@RangeItem.UpperBound"
                       value="@RangeItem.To"
                       @onchange="ToHandler">
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public RangeType RangeItem { get; set; }

    [Parameter]
    public String ComponentUniqueName
    {
        get => _componentUniqueName; set
        {
            if (!String.IsNullOrWhiteSpace(value))
            {
                _componentUniqueName = value.ToLower();
            }
        }
    }

    [Parameter]
    public EventCallback OnChange { get; set; }

    private string _componentUniqueName = "";
    private IJSObjectReference module;
    // Создаем объект который будет хранить ссылку на экземпляр этой страницы
    // Далее этот объект будет передан на JS строну
    private DotNetObjectReference<RangeComponent> thisObjRef;

    [JSInvokable]
    public async Task SliderChanged(int val, int from, int to)
    {
        RangeItem.From = from;
        RangeItem.To = to;
        StateHasChanged();
        await OnChange.InvokeAsync();
    }

    protected override void OnParametersSet()
    {
        RangeItem.From = RangeItem.From is not null ? RangeItem.From : RangeItem.LowerBound;
        RangeItem.To = RangeItem.To is not null ? RangeItem.To : RangeItem.UpperBound;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/scripts.js");
            // Инициализируем объект контейнер и передаем ему ссылку на экземляр объекта этой страницы
            // Далее ловим его на стороне JS
            thisObjRef = DotNetObjectReference.Create(this);
            await module.InvokeVoidAsync("initializeSlider", ComponentUniqueName, thisObjRef, RangeItem.LowerBound, RangeItem.UpperBound, RangeItem.From, RangeItem.To, 1);
            StateHasChanged();
        }
    }

    private async Task FromHandler(ChangeEventArgs args)
    {
        if (module is not null)
        {
            if (Int32.TryParse(args.Value.ToString(), out int from))
            {
                RangeItem.From = from;
                await OnChange.InvokeAsync();
                await module.InvokeVoidAsync("setSliderState", ComponentUniqueName, RangeItem.From, RangeItem.To);
            }
        }
    }

    private async Task ToHandler(ChangeEventArgs args)
    {
        if (module is not null)
        {
            if (Int32.TryParse(args.Value.ToString(), out int to))
            {
                RangeItem.To = to;
                await OnChange.InvokeAsync();
                await module.InvokeVoidAsync("setSliderState", ComponentUniqueName, RangeItem.From, RangeItem.To);
            }
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }

    public async Task SetState(int lowerBound, int upperBound)
    {
        if (module is not null)
        {
            await module.InvokeVoidAsync("setSliderState", ComponentUniqueName, lowerBound, upperBound);
        }
    }
}


@inject IStringLocalizer<App> Localizer
@inject IJSRuntime JSRuntime

@if (Products is not null)
{
    <div class="product-list">
        @foreach (ProductModel product in Products)
        {
            var carouselId = $"carousel-{product.Id}";
            @if (product.Images is not null && product.Images.Count > 1)
            {
                <div id="@carouselId" class="product__carousel">
                    <button @onclick="() => CloseButtonHandler(carouselId)"
                            class="product__carousel-close-btn">
                        <i class="big times circle outline icon"></i>
                    </button>
                    <div class="product__carousel-container">
                        @foreach (ImageModel image in product.Images)
                        {
                            <img src="@image.Uri" alt="@image.Caption" loading="lazy">
                        }
                    </div>
                </div>
            }
            <div class="product__list-item">
                <div class="product__image-container">
                    @if (product.Images is not null)
                    {
                        @if (product.Images.Count > 1)
                        {
                            <i class="huge search plus icon" @onclick="() => ImageClickhandler(carouselId)"></i>
                        }
                        var mainImage = product.Images.Where(i => i.IsMain).FirstOrDefault();
                        <img src="@mainImage.Uri" alt="@mainImage.Caption" loading="lazy"/>
                    }
                    else
                    {
                        <img src="img/products/product-no-photo-placeholder.jpg" alt="@Localizer["No picture available"]" loading="lazy">
                    }
                </div>
                <div class="product__content-container">
                    <a class="product__content-header">@product.ProductName</a>
                    <p class="product__content-description">
                        @product.Description
                    </p>
                </div>
                <div class="product__buy-container">
                    <div class="product__buy-price">
                        @product.Price
                    </div>
                    <div class="product__buy-to-cart">
                        <button class="product__buy-to-cart-btn" @onclick="async () => { await AddToCartHandler(product.Id); }">@Localizer["Add to cart"]</button>
                    </div>
                </div>
            </div>
        }

    </div>
}

@code {
    [Parameter]
    public EventCallback<int> OnAddToCart { get; set; }

    [Parameter]
    public List<ProductModel> Products { get; set; }

    private IJSObjectReference module;
    private string currentlyOppenedCarousel = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/scripts.js");
            await module.InvokeVoidAsync("fadeUpListItem");
        }
        if (module is not null)
        {
            await module.InvokeVoidAsync("makeListItemsVisible");
        }
    }


    private async Task AddToCartHandler(int productId)
    {
        await OnAddToCart.InvokeAsync(productId);
    }

    private async Task ImageClickhandler(string carouselId)
    {
        if (currentlyOppenedCarousel == carouselId) return;
        currentlyOppenedCarousel = carouselId;
        await module.InvokeVoidAsync("hideAllElements");
        await module.InvokeVoidAsync("showElement", carouselId);
    }

    private async Task CloseButtonHandler(string carouselId)
    {
        currentlyOppenedCarousel = "";
        await module.InvokeVoidAsync("hideElement", carouselId);
    }
}

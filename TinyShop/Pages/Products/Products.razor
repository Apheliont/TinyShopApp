@using TinyShop.Shared.Layouts
@layout ProductsLayout
@page "/categories/{categoryId:int}/products"
@inject IProductSqlDataService dataService
@using System.Text;
@using TinyShop.Extensions
@using TinyShop.Helpers
@inject NavigationManager NavigationManager
@inject IPurchaseSqlDataService purchaseDataService
@inject IUserUtilities userUtilities
@inject IStringLocalizer<App> Localizer

<div class="ui grid">
    <div class="row">
        <div class="four wide column">
        </div>
        <div class="twelve wide column">
            <SortPannelComponent MetadataModel="@MetadataModel"
                                 FilterModel="@FilterModel" 
                                 OnSortChange="OnSortChangeHandler"/>
        </div>
    </div>
    <div class="row">
        <div class="four wide column">
            <CategoryMenu AccordionCssString="categories-menu"/>
            <ProductFilterComponent FilterModel="@FilterModel"
                                    MetadataModel="@MetadataModel"
                                    OnApplyFilter="ApplyFilterHandler"
                                    OnResetFilter="ResetFilterHandler" />
        </div>
        <div class="twelve wide column">
            <ProductListComponent Products="@products" OnAddToCart="AddToCartHandler" />
            <Paginator NumberOfPages="@numberOfPages" CurrentPage="@FilterModel.PageNumber" OnPageChanged="PageHasChanged" />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int CategoryId { get; set; }

    private List<ProductModel> products;
    public ProductFilterModel FilterModel { get; set; }
    public ProductMetadataModel MetadataModel { get; set; }

    private int numberOfPages;


    protected override async Task OnParametersSetAsync()
    {
        InitFilterModel();
        await InitializeData();
    }


    private async Task InitializeData()
    {
        GetQueryStringValues();

        await Task.WhenAll(new List<Task> {
            LoadMetadata(),
            LoadProducts()
        });


        if (MetadataModel is not null)
        {
            numberOfPages = (int)(Math.Ceiling((double)MetadataModel.FoundRecords / (int)FilterModel.RowsPerPage));
        }

    }

    private void InitFilterModel()
    {
        FilterModel = new ProductFilterModel
        {
            CategoryId = CategoryId,
        };
    }

    private async Task LoadMetadata()
    {
        MetadataModel = await dataService.GetMetadata(FilterModel);
    }

    private async Task LoadProducts()
    {
        products = await dataService.GetFiltered(FilterModel);
    }


    void GetQueryStringValues()
    {
        if (NavigationManager.TryGetQueryString<int>("page", out int pageNumber))
        {
            FilterModel.PageNumber = pageNumber;
        }
        if (NavigationManager.TryGetQueryString<int>("minPrice", out int minPrice))
        {
            FilterModel.MinPrice = minPrice;
        }
        if (NavigationManager.TryGetQueryString<int>("maxPrice", out int maxPrice))
        {
            FilterModel.MaxPrice = maxPrice;
        }
        if (NavigationManager.TryGetQueryString<int>("orderBy", out int orderBy))
        {
            if(Enum.IsDefined(typeof(OrderByEnum), orderBy))
            {
                FilterModel.OrderBy = (OrderByEnum)orderBy;
            }
        }
        if (NavigationManager.TryGetQueryString<int>("sortOrder", out int sortOrder))
        {
            if (Enum.IsDefined(typeof(SortOrderEnum), sortOrder))
            {
                FilterModel.SortOrder = (SortOrderEnum)sortOrder;
            }
        }
        if (NavigationManager.TryGetQueryString<int>("rowsPerPage", out int rowsPerPage))
        {
            if (Enum.IsDefined(typeof(RowsPerPageEnum), rowsPerPage))
            {
                FilterModel.RowsPerPage = (RowsPerPageEnum)rowsPerPage;
            }
        }
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        base.InvokeAsync(async () =>
        {
            await InitializeData();
            StateHasChanged();
        });

    }

    private async Task AddToCartHandler(int productId)
    {
        string userId = await userUtilities.GetLoggedInUserId();
        if (userId is not null)
        {
            await purchaseDataService.AddToCart(userId, productId, 1);
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private void PageHasChanged(int page)
    {
        StringBuilder sb = new StringBuilder();
        sb.Append($"/categories/{CategoryId}/products?");
        sb.Append($"page={page}");
        if (FilterModel.MinPrice is not null)
        {
            sb.Append($"&minPrice={FilterModel.MinPrice}");
        }
        if (FilterModel.MaxPrice is not null)
        {
            sb.Append($"&maxPrice={FilterModel.MaxPrice}");
        }
        sb.Append($"&orderBy={(int)FilterModel.OrderBy}");
        sb.Append($"&sortOrder={(int)FilterModel.SortOrder}");
        sb.Append($"&rowsPerPage={(int)FilterModel.RowsPerPage}");

        NavigationManager.NavigateTo(sb.ToString());
    }

    private void ApplyFilterHandler()
    {
        // Если был применен фильтр то переходим на 1ю страницу
        FilterModel.PageNumber = 1;
        PageHasChanged(FilterModel.PageNumber);
    }

    private void ResetFilterHandler()
    {
        InitFilterModel();
        PageHasChanged(FilterModel.PageNumber);
    }

    private void OnSortChangeHandler()
    {
        FilterModel.PageNumber = 1;
        PageHasChanged(FilterModel.PageNumber);
    }
}
@page "/categories/{categoryId:int}/products"
@layout ProductsLayout
@using TinyShop.Shared.Layouts
@using System.Text;
@using TinyShop.Extensions
@using TinyShop.Pages.Products.ProductFilter
@using DataAccessLib.Enums
@inject IProductDataService dataService
@inject NavigationManager NavigationManager
@inject IUserUtilities userUtilities
@inject IStringLocalizer<App> Localizer
@implements IDisposable

<div class="ui grid">
    <div class="row">
        <div class="four wide column">
        </div>
        <div class="twelve wide column">
            <SortPannelComponent MetadataModel="@ProductsWithMetadata.Metadata"
                                 FilterModel="@FilterModel"
                                 OnSortChange="() => PageHasChanged(1)" />
        </div>
    </div>
    <div class="row">
        <div class="four wide column">
            <CategoryMenu AccordionCssString="categories-menu" />
            <ProductFilterComponent FilterModel="@FilterModel"
                                    OnApplyFilter="() => PageHasChanged(1)"
                                    OnResetFilter="() => PageHasChanged(1)" />
        </div>
        <div class="twelve wide column">
            <ProductListComponent Products="@ProductsWithMetadata.Products"/>
            <Paginator NumberOfPages="@numberOfPages" CurrentPage="@FilterModel.PageNumber" OnPageChanged="PageHasChanged" />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int CategoryId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? PageNumber { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? OrderBy { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? SortOrder { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? RowsPerPage { get; set; }

    public ProductsWithMetadataModel ProductsWithMetadata { get; set; }

    public ProductFilterModel FilterModel { get; set; }

    private int numberOfPages;

    protected override void OnParametersSet()
    {
        FilterModel = new ProductFilterModel { CategoryId = CategoryId };
        FilterModel.PageNumber = PageNumber ?? 1;
        FilterModel.OrderBy = OrderBy is null ? OrderByEnum.ProductName : (OrderByEnum)OrderBy;
        FilterModel.SortOrder = SortOrder is null ? SortOrderEnum.ASC : (SortOrderEnum)SortOrder;
        FilterModel.RowsPerPage = RowsPerPage is null ? RowsPerPageEnum._25 : (RowsPerPageEnum)RowsPerPage;

        InitializeData();
    }


    private void InitializeData()
    {
        ProductsWithMetadata = dataService.GetFilteredWithMetadata(TransformModelUtils.CreateFilterDto(FilterModel));

        if (ProductsWithMetadata is not null)
        {
            TransformModelUtils.FillupFilterModel(ProductsWithMetadata.Metadata, FilterModel);
            numberOfPages = (int)(Math.Ceiling((double)ProductsWithMetadata.Metadata.FoundRecords / (int)FilterModel.RowsPerPage));
        }

    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        InitializeData();
        StateHasChanged();
    }



    void IDisposable.Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private void PageHasChanged(int page)
    {
        FilterModel.PageNumber = page;
        var address = NavigationManager.GetUriWithQueryParameters(
        new Dictionary<string, object>
                {
                    { nameof(PageNumber), FilterModel.PageNumber },
                    { nameof(OrderBy), (int)FilterModel.OrderBy },
                    { nameof(SortOrder), (int)FilterModel.SortOrder },
                    { nameof(RowsPerPage), (int)FilterModel.RowsPerPage },
                });
        NavigationManager.NavigateTo(address);
    }
}
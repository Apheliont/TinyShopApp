@inject IStringLocalizer<App> Localizer
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="ui fluid vertical menu">
    <div class="ui styled fluid accordion">
        <div class="active title">
            <i class="dropdown icon"></i>
            @Localizer["Price"]
        </div>
        <div class="active content">
            <MoneyRangeComponent LowerBound="@_lowerBound"
                                 UpperBound="@_upperBound"
                                 OnRangeChange="PriceRangeChangeHandler" />
        </div>
    </div>
    <div class="two ui buttons btn__filterblock">
        <button class="small ui orange button" disabled="@IsApplyDisabled" @onclick="ApplyFilterHandler">
            @Localizer["Apply"]
        </button>
        <button class="small ui red button" disabled="@IsResetDisabled" @onclick="ResetFilterHandler">
            @Localizer["Reset"]
        </button>
    </div>
</div>

@code {
    [Parameter]
    public ProductFilterModel FilterModel { get; set; }

    [Parameter]
    public ProductMetadataModel MetadataModel { get; init; }

    [Parameter]
    public EventCallback OnResetFilter { get; set; }

    [Parameter]
    public EventCallback OnApplyFilter { get; set; }

    private bool IsApplyDisabled = true;
    private bool IsResetDisabled = true;
    private IJSObjectReference module;
    private int _lowerBound;
    private int _upperBound;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/scripts.js");
            await module.InvokeVoidAsync("initializeAccordion");
        }
    }

    protected override void OnParametersSet()
    {
        if (MetadataModel is not null)
        {
            _lowerBound = (int)Math.Floor(MetadataModel.MinPrice);
            _upperBound = (int)Math.Ceiling(MetadataModel.MaxPrice);
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }

    private void PriceRangeChangeHandler((int lowerValue, int upperValue) t)
    {
        FilterModel.MinPrice = t.lowerValue;
        FilterModel.MaxPrice = t.upperValue;
        IsApplyDisabled = false;
        IsResetDisabled = false;
    }

    private async Task ApplyFilterHandler()
    {
        IsApplyDisabled = true;
        IsResetDisabled = false;
        await OnApplyFilter.InvokeAsync();
    }

    private async Task ResetFilterHandler()
    {
        IsApplyDisabled = true;
        IsResetDisabled = true;
        await module.InvokeVoidAsync("setSliderState", _lowerBound, _upperBound);
        await OnResetFilter.InvokeAsync();
    }
}

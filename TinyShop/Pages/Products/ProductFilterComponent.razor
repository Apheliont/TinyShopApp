@inject IStringLocalizer<App> Localizer
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="ui fluid vertical menu">
    <div class="ui styled fluid accordion">
        <div class="active title">
            <i class="dropdown icon"></i>
            @Localizer["Price"]
        </div>
        <div class="active content">
            <div class="ui ticked range slider" id="slider-range"></div>
            <div class="ui two column grid">
                <div class="row">
                    <div class="column">
                        <div class="ui right small labeled input">
                            <label for="amount" class="ui label">₽</label>
                            <input type="number"
                                   id="range-slider-input-1"
                                   min="@_lowerBound"
                                   max="@_upperBound"
                                   placeholder="@placeholderLower"
                                   value="@_lowerValue"
                                   @onchange="LowerBoundHandler">
                        </div>
                    </div>
                    <div class="column>">
                        <div class="ui right small labeled input">
                            <label for="amount" class="ui label">₽</label>
                            <input type="number"
                                   min="@_lowerBound"
                                   max="@_upperBound"
                                   placeholder="@placeholderUpper"
                                   id="range-slider-input-2"
                                   value="@_upperValue"
                                   @onchange="UpperBoundHandler">
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

@code {
    [Parameter]
    public ProductFilterModel FilterModel { get; set; }

    private int _lowerValue;
    private int _upperValue;
    private int _lowerBound;
    private int _upperBound;

    private string placeholderLower => $"{Localizer["From"]} {_lowerBound}";
    private string placeholderUpper => $"{Localizer["To"]} {_upperBound}";

    private IJSObjectReference module;
    // Создаем объект который будет хранить ссылку на экземпляр этой страницы
    // Далее этот объект будет передан на JS строну
    private DotNetObjectReference<ProductFilterComponent> thisObjReg;

    [JSInvokable]
    public void SliderChanged(int val, int min, int max)
    {
        _lowerValue = min;
        _upperValue = max;
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        _lowerBound = (int)Math.Floor(FilterModel.MinPrice ?? 0);
        _upperBound = (int)Math.Ceiling(FilterModel.MaxPrice ?? 0);

        _lowerValue = (int)((double)(_upperBound - _lowerBound) * 0.1) + _lowerBound;
        _upperValue = _upperBound - (int)((double)(_upperBound - _lowerBound) * 0.1);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/scripts.js");
            await module.InvokeVoidAsync("initializeAccordion");

            // Инициализируем объект контейнер и передаем ему ссылку на экземляр объекта этой страницы
            // Далее ловим его на стороне JS
            thisObjReg = DotNetObjectReference.Create(this);
            await module.InvokeVoidAsync("initializeSlider", thisObjReg, _lowerBound, _upperBound, _lowerValue, _upperValue, 1);
        }
    }


    private async Task LowerBoundHandler(ChangeEventArgs args)
    {
        if (module is not null)
        {
            if (Int32.TryParse(args.Value.ToString(), out _lowerValue))
            {
                await module.InvokeVoidAsync("setSliderState", _lowerValue, _upperValue);
                StateHasChanged();
            }
        }
    }

    private async Task UpperBoundHandler(ChangeEventArgs args)
    {
        if (module is not null)
        {
            if (Int32.TryParse(args.Value.ToString(), out _upperValue))
            {
                await module.InvokeVoidAsync("setSliderState", _lowerValue, _upperValue);
                StateHasChanged();
            }
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}

@inject IStringLocalizer<App> Localizer
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="ui fluid vertical menu">
    <div class="ui styled fluid accordion">
        <div class="active title">
            <i class="dropdown icon"></i>
            @Localizer["Price"]
        </div>
        <div class="active content">
            <MoneyRangeComponent FilterModel="@FilterModel"
                                 LowerBound="@_lowerBound"
                                 UpperBound="@_upperBound"
                                 OnRangeChange="PriceRangeChangeHandler"
                                 @ref="moneyRangeComponent" />
        </div>
    </div>
    <div class="item">
        <span class="ui orange rating"
              id="@filterRatingId"
              data-icon="star"
              data-rating="@FilterModel.MinRating"
              data-max-rating="5"></span>  @Localizer["Rating from and above"]
        </div>
        <div class="two ui buttons btn__filterblock">
            <button class="small ui orange button" disabled="@IsApplyDisabled" @onclick="ApplyFilterHandler">
                @Localizer["Apply"]
            </button>
            <button class="small ui red button" disabled="@IsResetDisabled" @onclick="ResetFilterHandler">
                @Localizer["Reset"]
            </button>
        </div>
    </div>

    @code {
        [Parameter]
        public ProductFilterModel FilterModel { get; set; }

        [Parameter]
        public ProductMetadataModel MetadataModel { get; init; }

        [Parameter]
        public EventCallback OnResetFilter { get; set; }

        [Parameter]
        public EventCallback OnApplyFilter { get; set; }

        private MoneyRangeComponent moneyRangeComponent;

        private bool IsApplyDisabled = true;
        private bool IsResetDisabled = true;

        private string filterRatingId = "filter-rating";

        private IJSObjectReference module;
        private DotNetObjectReference<ProductFilterComponent> thisObjRef;
        private int _lowerBound;
        private int _upperBound;

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/scripts.js");
                thisObjRef = DotNetObjectReference.Create(this);
                await module.InvokeVoidAsync("initializeFilterRating", thisObjRef, filterRatingId);
                await module.InvokeVoidAsync("initializeAccordion");
            }
        }

        protected override void OnParametersSet()
        {
            if (MetadataModel is not null)
            {
                _lowerBound = (int)Math.Floor(MetadataModel.MinPrice);
                _upperBound = (int)Math.Ceiling(MetadataModel.MaxPrice);
            }
        }

        async ValueTask IAsyncDisposable.DisposeAsync()
        {
            if (module is not null)
            {
                await module.DisposeAsync();
            }
        }

        private void PriceRangeChangeHandler((int lowerValue, int upperValue) t)
        {
            FilterModel.MinPrice = t.lowerValue;
            FilterModel.MaxPrice = t.upperValue;
            IsApplyDisabled = false;
            IsResetDisabled = false;
        }

        private async Task ApplyFilterHandler()
        {
            await OnApplyFilter.InvokeAsync();
            IsApplyDisabled = true;
            IsResetDisabled = false;
        }

        private async Task ResetFilterHandler()
        {
            await moneyRangeComponent.SetState(_lowerBound, _upperBound);
            if (module is not null)
            {
                await module.InvokeVoidAsync("setFilterRatingState", filterRatingId, 0);
            }
            await OnResetFilter.InvokeAsync();
            IsApplyDisabled = true;
            IsResetDisabled = true;
        }


        [JSInvokable]
        public Task FilterRatingChanged(int rating)
        {
            IsApplyDisabled = false;
            IsResetDisabled = false;
            FilterModel.MinRating = rating;
            StateHasChanged();
            return Task.CompletedTask;
        }
    }

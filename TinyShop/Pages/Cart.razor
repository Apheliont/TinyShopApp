@page "/cart"
@inject IUserUtilities userUtilities
@inject IStringLocalizer<App> Localizer
@inject IPurchaseSqlDataService purchaseDataService

@if (purchases is not null)
{
    @if (purchases.Any())
    {
        <table class="ui fixed single line compact celled definition table">
            <thead class="full-width">
                <tr>
                    <th>@Localizer["Product name"]</th>
                    <th>@Localizer["Price"]</th>
                    <th>@Localizer["Quantity"]</th>
                    <th>@Localizer["Action"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (PurchaseModel purchase in purchases)
                {
                    <tr>
                        <td><span class="text-regular">@purchase.ProductName</span></td>
                        <td>@Math.Round(purchase.Price, 2)</td>
                        <td style="text-align: center">
                            <div class="ui input focus">
                                <input type="number"
                           min="1"
                           value="@purchase.Quantity"
                           @onchange="async (args) => { await ChangeQuantityHandler(purchase.Id, args); }">
                            </div>
                        </td>
                        <td style="text-align: center">
                            <i class="trash icon" style="cursor: pointer" @onclick="async () => { await DeletePurchaseHandler(purchase.Id); }"></i>
                        </td>
                    </tr>
                }
            </tbody>
            <tfoot class="full-width">
                <tr>
                    <th>
                        <span class="text-bold">@Localizer["Total"]:</span>
                    </th>
                    <th>
                        <span class="text-bold">@totalPrice</span>
                    </th>
                    <th colspan="2">
                        <div class="ui right floated small primary button">
                            @Localizer["Buy"]
                        </div>
                    </th>
                </tr>
            </tfoot>
        </table>
    }
}

@code {
    private List<PurchaseModel> purchases;
    private decimal totalPrice => Math.Round(purchases.Sum(prod => prod.Price * prod.Quantity), 2);
    protected override async Task OnInitializedAsync()
    {
        purchases = await GetPurchases();
    }

    private async Task<List<PurchaseModel>> GetPurchases()
    {
        string userId = await userUtilities.GetLoggedInUserId();
        if (userId is not null)
        {
            return await purchaseDataService.GetAll(userId);
        }
        return new List<PurchaseModel>();
    }

    private async Task DeletePurchaseHandler(int purchaseId)
    {
        await purchaseDataService.Delete(purchaseId);
        purchases.Remove(purchases.Where(p => p.Id == purchaseId).FirstOrDefault());
    }

    private async Task ChangeQuantityHandler(int purchaseId, ChangeEventArgs args)
    {
        if (Int32.TryParse(args.Value.ToString(), out int q))
        {
            await purchaseDataService.Update(purchaseId, q);
        }
        purchases = await GetPurchases();
    }
}

@using TinyShop.Web.Models
@using TinyShop.Web.Services
@using System.Globalization
@inject ICategoryService categoryService
@inject IUriService uriService
@inject ILocalStorageService localStorage
@inject IStringLocalizer<App> Localizer
@inject NavigationManager NavigationManager

<div class="@AccordionCssString">
    <div class="title">
        <i class="bars icon"></i>
        @Localizer["Categories"]
    </div>
    <div class="@openedMenuCssString">
        <div class="ui secondary vertical fluid menu">
            @if (categories is not null)
            {
                @foreach (CategoryModel category in categories)
                {
                    <NavLink class="@GetNavLinkCssClass(category)" Match="NavLinkMatch.All" @onclick="async () => await ChangeCategoryHandler(category)">
                        @if (category.Image is not null)
                        {
                            var categoryImageUrl = category.Image.UriSizeS is not null ? category.Image.UriSizeS : category.Image.UriSizeM;
                            <img class="category-menu__image" src="@categoryImageUrl" width="30" height="30" alt="@category.Image.Caption">
                        }
                        else
                        {
                            <div class="category-menu__no-image-placeholder"></div>
                        }
                        @category.CategoryName
                    </NavLink>
                }
            }
        </div>
    </div>
</div>

@code {

    private int? rootCategoryId;

    [Parameter]
    public bool IsMenuOpened { get; set; } = false;

    [Parameter]
    public EventCallback OnCategoryChange { get; set; }

    [Parameter]
    public string AccordionCssString
    {
        get => accordionCssString; set
        {
            if (!String.IsNullOrEmpty(value))
            {
                accordionCssString += $" {value}";
            }
        }
    }

    private string openedMenuCssString;
    private List<CategoryModel> categories;
    private string accordionCssString = "ui styled accordion";
    private UserSettings userSettings = null!;

    private string GetNavLinkCssClass(CategoryModel category)
    {
        return (rootCategoryId is not null && rootCategoryId == category.Id) ? "active item" : "item";
    }

    private async Task ChangeCategoryHandler(CategoryModel category)
    {
        await OnCategoryChange.InvokeAsync();

        var url = $"categories/{category.Id.ToString()}";
        if (!category.IsParent)
        {
            string parameters = await localStorage.ReadSortingParameters();
            if (parameters.Length > 0)
            {
                url += $"/products?{parameters}";
            }
            else
            {
                url += "/products";
            }
        }
        NavigationManager.NavigateTo(url);

        var res = await uriService.GetBreadcrumbs(url, userSettings);
        rootCategoryId = (res is not null && res.Any()) ? res.Last().Id : null;
    }

    protected override async Task OnParametersSetAsync()
    {
        UserSettings userSettings = new UserSettings
        { 
            PreferedLanguageCode = CultureInfo.CurrentCulture.TwoLetterISOLanguageName
        };
        categories = await categoryService.GetRoot(userSettings);
        openedMenuCssString = IsMenuOpened ? "active content" : "content";
    }


    protected override async Task OnInitializedAsync()
    {
        userSettings = new UserSettings { PreferedLanguageCode = CultureInfo.CurrentCulture.TwoLetterISOLanguageName };
        string uri = NavigationManager.Uri;
        var res = await uriService.GetBreadcrumbs(uri, userSettings);
        rootCategoryId = (res is not null && res.Any()) ? res.Last().Id : null;
    }
}

@using TinyShop.Web.DTOs
@using TinyShop.Web.Models
@using TinyShop.Web.Services
@using TinyShop.Web.Pages.Shared
@using TinyShop.Web.Pages.Shared.Layouts
@layout ProductsLayout
@inject IStringLocalizer<App> Localizer
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@inject IUserService userService
@inject IPurchaseService purchaseService
@inject IProductService productService
@inject AppState AppState
@page "/products/{ProductId:int}"

@if (product is not null)
{
    <div class="ui grid product_container">
        <div class="eight wide column product-galery__row">
            <div class="product-galery__column">
                <div class="product-galery__container">
                    <div class="product-thumbnails__container">
                        @if (product.Images is not null)
                        {
                            @foreach (ImageModel image in product.Images)
                            {
                                var imageUrl = image.UriSizeS is not null ? image.UriSizeS : image.UriSizeM;
                                <img src="@imageUrl" alt="@image.Caption" @onmouseover="async () => await ThumbnailMouseOverHandler(image)">
                            }
                        }
                    </div>
                    <div class="product-image__container">
                        @if (selectedImage is not null)
                        {
                            var imageUrl = selectedImage.UriSizeL is not null ? selectedImage.UriSizeL : selectedImage.UriSizeM;
                            <img class="product-image__image" src="@imageUrl" alt="@selectedImage.Caption" />
                        }
                        else
                        {
                            <img src=@JsInteropConstants.ProductNoImgPlaceholderPath alt="@Localizer["No picture available"]" />
                        }
                    </div>
                </div>
                <div class="product-id__container">
                    <p>@Localizer["Product Id"]: @product.Id</p>
                </div>
            </div>
        </div>
        <div class="product-info__row">
            <div class="eight wide column product-info__container">
                <div class="ui top attached tabular menu">
                    <a class="item active" data-tab="description">@Localizer["Description"]</a>
                    @if (product.Details is not null)
                    {
                        <a class="item" data-tab="specifications">@Localizer["Specifications"]</a>
                    }
                    <a class="item" data-tab="reviews">@Localizer["Reviews"]</a>
                </div>
                <div class="ui bottom attached tab segment active product-info__tabData" data-tab="description">
                    <div class="product-info__tab-description">
                        <div class="product-name__container">
                            <p>@product.ProductName</p>
                        </div>
                        <div class="product-description__container">
                            <p>@product.Description</p>
                        </div>
                        <div class="product-buy__container">
                            <div class="product__buy-price">
                                <p>@Math.Round(@product.Price, 2)<span>₽</span></p>
                            </div>
                            <div class="product__buy-to-cart">
                                @if (Purchases is not null)
                                {
                                    var foundPurchase = Purchases.Find(item => item.ProductId == product.Id);
                                    if (foundPurchase is not null)
                                    {
                                        <InputNumberComponent Value="@foundPurchase.Quantity"
                                                  OnValueChange=@(async (quantity) => await OnPurchaseQuantityChange(foundPurchase.Id, quantity)) />
                                    }
                                    else
                                    {
                                        <button class="product__buy-to-cart-btn"
                                             @onclick="async () => { await AddToCartHandler(product); }">
                                            @Localizer["Add to cart"]
                                        </button>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
                @if (product.Details is not null)
                {
                    <div class="ui bottom attached tab segment product-info__tabData" data-tab="specifications">
                        <div class="ui grid product-info__tab-specifications">
                            @foreach (string key in product.Details.Keys)
                            {
                                <div class="sixteen wide column">
                                    <p><b>@key</b></p>
                                    <div class="ui two column grid">
                                        @foreach (var row in product.Details[key])
                                        {
                                            <div class="row">
                                                <div class="column">@row.Name</div>
                                                <div class="column">@row.Value</div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
                <div class="ui bottom attached tab segment product-info__tabData" data-tab="reviews">
                    Second
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int ProductId { get; set; }

    private List<PurchaseModel> Purchases;
    private TinyShop.Web.Models.ProductModel product;
    private IJSObjectReference module;
    private ImageModel selectedImage;

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", JsInteropConstants.JsScriptFilePath);
            await module.InvokeVoidAsync(JsInteropConstants.InitTabFuncName);
            Purchases = await purchaseService.GetAll();
            StateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        product = await productService.GetProduct(ProductId);
        try
        {
            selectedImage = product.Images.Where(i => i.IsMain).FirstOrDefault();
        }
        catch { }
    }

    private async Task ThumbnailMouseOverHandler(ImageModel image)
    {
        if (module is not null)
        {
            await module.InvokeVoidAsync(JsInteropConstants.FadeInOutFuncName, "product-image__image");
        }
        selectedImage = image;
        if (module is not null)
        {
            await module.InvokeVoidAsync(JsInteropConstants.FadeInOutFuncName, "product-image__image");
        }
    }

    private async Task OnPurchaseQuantityChange(int purchaseId, int quantity)
    {
        if (quantity > 0)
        {
            Purchases.FirstOrDefault(item => item.Id == purchaseId).Quantity = quantity;
            await purchaseService.Update(purchaseId, quantity);
        }
        else
        {
            Purchases.Remove(Purchases.Single(item => item.Id == purchaseId));
            await purchaseService.Delete(purchaseId);
            StateHasChanged();
        }
        AppState.NotifyCartItemsCountChange();
    }

    private async Task AddToCartHandler(TinyShop.Web.Models.ProductModel product)
    {
        var purchase = new PurchaseModel
            {
                Id = product.Id,
                ProductId = product.Id,
                Price = product.Price,
                ProductName = product.ProductName,
                Quantity = 1
            };
        Purchases?.Add(purchase);
        await purchaseService.AddToCart(purchase);
        AppState.NotifyCartItemsCountChange();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}

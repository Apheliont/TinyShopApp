@using System.ComponentModel
@using System.Globalization
@using TinyShop.Web.CustomTypes
@using TinyShop.Web.Models
@typeparam TRange
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<App> Localizer
@implements IAsyncDisposable
@implements IResetableComponent

<div class="ui ticked range slider" id="@ComponentUniqueName"></div>
<div class="ui two column grid">
    <div class="row">
        <div class="column">
            <div class="ui fluid right small labeled input">
                <label for="range-component__lower-bound" class="ui label">@Localizer[Measurement ?? "-"]</label>
                <input type="number"
                       step="@step"
                       id="range-component__lower-bound"
                       class="spinners--disable"
                       min="@RangeModel.LowerBound"
                       max="@RangeModel.UpperBound"
                       value="@RangeModel.FromAsString"
                       @onchange="FromHandler">
            </div>
        </div>
        <div class="column">
            <div class="ui fluid right small labeled input">
                <label for="range-component__upper-bound" class="ui label">@Localizer[Measurement ?? "-"]</label>
                <input type="number"
                       step="@step"
                       id="range-component__upper-bound"
                       class="spinners--disable"
                       min="@RangeModel.LowerBound"
                       max="@RangeModel.UpperBound"
                       value="@RangeModel.ToAsString"
                       @onchange="ToHandler">
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public List<IResetableComponent> ChildComponentList { get; set; } = null!;

    [Parameter]
    public RangeModel<TRange> RangeModel { get; set; } = null!;

    [Parameter]
    public string? Measurement { get; set; }

    [Parameter]
    public string ComponentUniqueName { get; set; } = null!;

    [Parameter]
    public EventCallback OnChange { get; set; }

    double step = typeof(TRange) == typeof(double) ? 0.1 : 1.0;

    private IJSObjectReference? module;
    // Создаем объект который будет хранить ссылку на экземпляр этой страницы
    // Далее этот объект будет передан на JS строну
    private DotNetObjectReference<RangeComponent<TRange>>? thisObjRef;

    [JSInvokable]
    public async Task SliderChanged(TRange val, TRange from, TRange to)
    {
        RangeModel.From = from;
        RangeModel.To = to;
        await OnChange.InvokeAsync();
    }

    protected override void OnInitialized()
    {
        ChildComponentList.Add(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", JsInteropConstants.JsScriptFilePath);
            // Инициализируем объект контейнер и передаем ему ссылку на экземляр объекта этой страницы
            // Далее ловим его на стороне JS
            thisObjRef = DotNetObjectReference.Create(this);
            await module.InvokeVoidAsync(
                JsInteropConstants.InitSliderFuncName,
                ComponentUniqueName,
                thisObjRef,
                RangeModel.LowerBound,
                RangeModel.UpperBound,
                RangeModel.From,
                RangeModel.To, step);
        }
    }

    private async Task FromHandler(ChangeEventArgs args)
    {

        if (module is not null && args.Value is not null)
        {

            RangeModel.FromAsString = args!.Value!.ToString()!;

            await OnChange.InvokeAsync();
            await module.InvokeVoidAsync(
                JsInteropConstants.SetSliderFuncName,
                ComponentUniqueName,
                RangeModel.From,
                RangeModel.To);
        }
    }


    private async Task ToHandler(ChangeEventArgs args)
    {
        if (module is not null && args.Value is not null)
        {
            RangeModel.ToAsString = args!.Value!.ToString()!;

            await OnChange.InvokeAsync();
            await module.InvokeVoidAsync(
                JsInteropConstants.SetSliderFuncName,
                ComponentUniqueName,
                RangeModel.From,
                RangeModel.To);
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }

    public void Reset()
    {
        RangeModel.Reset();

        if (module is not null)
        {
            module.InvokeVoidAsync(
                JsInteropConstants.SetSliderFuncName,
                ComponentUniqueName,
                RangeModel.LowerBound,
                RangeModel.UpperBound);
        }
    }
}


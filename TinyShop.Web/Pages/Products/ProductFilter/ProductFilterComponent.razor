@using System.Reflection
@using TinyShop.Web.Models
@using TinyShop.Web.CustomTypes
@inject IStringLocalizer<App> Localizer
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<CascadingValue Value="@ChildComponentList">
    <div class="ui fluid vertical menu">
        <div class="ui styled fluid accordion">
            <div class="active title">
                <i class="dropdown icon"></i>
                @Localizer["Price"]
            </div>

            <div class="active content">
                <RangeComponent ComponentUniqueName="Price"
                                RangeItem="FilterModel.Price"
                                OnChange="ComponentChanged" />
            </div>


        </div>
        <div class="item">
            <RatingComponent ComponentUniqueName="Rating"
                             Text="Rating from and above"
                             RatingItem="FilterModel.Rating"
                             OnChange="ComponentChanged" />
        </div>
        @if (FilterModel.DynamicFilter is not null)
        {
            var details = FilterModel.DynamicFilter;
            <div class="ui styled fluid accordion">
                @foreach (PropertyInfo prop in details.GetType().GetProperties())
                {
                    <div class="title">
                        <i class="dropdown icon"></i>
                        @Localizer[details.DescriptionAttr(prop.Name)]
                    </div>
                    <div class="content">
                        @switch (prop.PropertyType)
                        {
                            case Type t when t == typeof(CheckboxListModel):
                                <CheckboxListComponent ComponentUniqueName="@prop.Name"
                                       CheckboxListItem="@((CheckboxListModel)prop.GetValue(details, null))"
                                       OnChange="ComponentChanged" />
                                break;
                            case Type t when t == typeof(CheckboxModel):
                                <CheckboxComponent ComponentUniqueName="@prop.Name"
                                   CheckboxItem="@((CheckboxModel)prop.GetValue(details, null))"
                                   OnChange="ComponentChanged" />
                                break;
                            case Type t when t == typeof(RangeModel):
                                <RangeComponent ComponentUniqueName="@prop.Name"
                                RangeItem="@((RangeModel)prop.GetValue(details, null))"
                                OnChange="ComponentChanged" />
                                break;
                            default:
                                <p>@prop.Name</p>
                                break;
                        }
                    </div>
                }
            </div>
        }

        <div class="two ui buttons btn__filterblock">
            <button class="small ui orange button" disabled="@IsApplyDisabled" @onclick="ApplyFilterHandler">
                @Localizer["Apply"]
            </button>
            <button class="small ui red button" disabled="@IsResetDisabled" @onclick="ResetFilterHandler">
                @Localizer["Reset"]
            </button>
        </div>
    </div>
</CascadingValue>

@code {
    [Parameter]
    public ProductFilterModel FilterModel { get; set; }

    [Parameter]
    public EventCallback OnResetFilter { get; set; }

    [Parameter]
    public EventCallback OnApplyFilter { get; set; }

    public List<IResetableComponent> ChildComponentList = new();

    private bool IsApplyDisabled = true;
    private bool IsResetDisabled = true;


    private IJSObjectReference module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", JsInteropConstants.JsScriptFilePath);
            await module.InvokeVoidAsync(JsInteropConstants.InitAccordionFuncName);
        }
    }


    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }


    private async Task ApplyFilterHandler()
    {
        await OnApplyFilter.InvokeAsync();
        IsApplyDisabled = true;
        IsResetDisabled = false;
    }

    private async Task ResetFilterHandler()
    {
        ChildComponentList.ForEach(component => component.Reset());
        await OnResetFilter.InvokeAsync();
        IsApplyDisabled = true;
        IsResetDisabled = true;
    }

    private void ComponentChanged()
    {
        IsApplyDisabled = false;
        IsResetDisabled = false;
    }
}

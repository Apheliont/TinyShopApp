@using System.Reflection
@using System.Dynamic
@using Newtonsoft.Json
@using TinyShop.Web.Models
@using TinyShop.Web.CustomTypes
@inject IStringLocalizer<App> Localizer
@inject IJSRuntime JSRuntime

<CascadingValue Value="@ChildComponentList">
    <div class="ui fluid vertical menu">
        <div class="item">
            <div class="header">@Localizer["Price"]</div>
            <RangeComponent ComponentUniqueName="Price"
                            RangeModel="@FilterModel.Price"
                            Measurement="ru"
                            OnChange="ComponentChanged" />
        </div>
        <div class="item">
            <RatingComponent ComponentUniqueName="Rating"
                             Text="Rating from and above"
                             RatingItem="FilterModel.Rating"
                             OnChange="ComponentChanged" />
        </div>

        @if (FilterModel.CategoryFilters is not null && FilterModel.CategoryFilters.Any())
        {
            <div class="ui styled fluid accordion">
                <div class="active title">
                    <i class="dropdown icon"></i>
                    @Localizer["Additional filters"]
                </div>
                <div class="active content" style="padding: 0px !important">
                    @foreach (CategoryFilter filter in FilterModel.CategoryFilters)
                    {
                        if (filter.Result is null) continue;

                        <div class="item">
                            <div class="header">@Localizer[filter.Description ?? ""]</div>

                            @switch (filter.Type.ToLower())
                            {
                                case "checkbox":
                                    {
                                        CheckboxModel checkbox = (CheckboxModel)filter.Result;
                                        <CheckboxComponent CheckboxModel="@checkbox"
                                            OnChange="ComponentChanged" />
                                        break;
                                    }

                                case "radio":
                                    {
                                        RadioModel radio = (RadioModel)filter.Result;
                                        <RadioComponent ComponentUniqueName="@filter.Name"
                                            RadioModel="@radio"
                                            OnChange="ComponentChanged" />
                                        break;
                                    }

                                case "range<int>":
                                    {
                                        RangeModel<int> range = (RangeModel<int>)filter.Result;
                                        <RangeComponent ComponentUniqueName="@filter.Name"
                                            Measurement="@filter.Measurement"
                                            RangeModel="@(range)"
                                            OnChange="ComponentChanged" />
                                        break;
                                    }

                                case "range<double>":
                                    {
                                        RangeModel<double> range = (RangeModel<double>)filter.Result;
                                        <RangeComponent ComponentUniqueName="@filter.Name"
                                            Measurement="@filter.Measurement"
                                            RangeModel="@(range)"
                                            OnChange="ComponentChanged" />
                                        break;
                                    }
                            }
                        </div>
                    }
                </div>
            </div>
        }

        <div class="two ui buttons btn__filterblock">
            <button class="small ui orange button" disabled="@IsApplyDisabled" @onclick="ApplyFilterHandler">
                @Localizer["Apply"]
            </button>
            <button class="small ui red button" disabled="@IsResetDisabled" @onclick="ResetFilterHandler">
                @Localizer["Reset"]
            </button>
        </div>
    </div>
</CascadingValue>

@code {
    [Parameter]
    public ProductFilterModel FilterModel { get; set; } = null!;

    [Parameter]
    public EventCallback OnResetFilter { get; set; }

    [Parameter]
    public EventCallback OnApplyFilter { get; set; }

    public List<IResetableComponent> ChildComponentList = new();

    private bool IsApplyDisabled = true;
    private bool IsResetDisabled = true;


    protected override void OnParametersSet()
    {
        if (FilterModel.CategoryFilters is not null)
        {
            FilterModel.CategoryFilters = FilterModel.CategoryFilters.OrderBy(x => x.Index).ToList();
        }
    }


    private async Task ApplyFilterHandler()
    {
        await OnApplyFilter.InvokeAsync();
        IsApplyDisabled = true;
        IsResetDisabled = false;
    }

    private async Task ResetFilterHandler()
    {
        ChildComponentList.ForEach(component => component.Reset());
        await OnResetFilter.InvokeAsync();
        IsApplyDisabled = true;
        IsResetDisabled = true;
    }

    private void ComponentChanged()
    {
        IsApplyDisabled = false;
        IsResetDisabled = false;
    }
}
